class CategoryForm(forms.ModelForm):
    class Meta:
        model = Category
        fields = [
            'name', 'style', 'short_description', 'detailed_description', 
            'icon', 'banner', 'side_image', 'parent', 'is_active'
        ]
        widgets = {
            'name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Enter category name'}),
            'style': forms.Select(attrs={'class': 'form-control'}),
            'short_description': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Enter short description'}),
            #'detailed_description': SummernoteWidget(attrs={'class': 'form-control', 'placeholder': 'Enter detailed description'}),
            #'detailed_description': SummernoteWidget(),
            'detailed_description': forms.Textarea(attrs={'class': 'form-control', 'placeholder': 'Enter detailed description'}),
            'icon': forms.FileInput(attrs={'class': 'form-control'}), 
            'banner': forms.FileInput(attrs={'class': 'form-control'}), 
            'side_image': forms.FileInput(attrs={'class': 'form-control'}),  
            'parent': forms.Select(attrs={'class': 'form-control'}),
            'is_active': forms.CheckboxInput(attrs={'class': 'form-check-input'})
        }
        labels = {
            'name': 'Category Name',
            'style': 'Display Style',
            'short_description': 'Short Description',
            'detailed_description': 'Detailed Description',
            'icon': 'Icon',
            'banner': 'Banner',
            'side_image': 'Side Image',
            'parent': 'Parent Category',
            'is_active': 'Active'
        }
        help_texts = {
            'name': 'Display name for the category',
            'style': 'Visual display style for the category',
            'short_description': 'Brief summary for search results or listings',
            'detailed_description': 'Comprehensive description for SEO and context',
            'icon': 'Icon representing the category',
            'banner': 'Large banner image at the top of the category page',
            'side_image': 'Side image for promoting sub-categories',
            'parent': 'Parent category for multi-level hierarchy',
            'is_active': 'Indicates if the category is currently active'
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.fields['name'].required = True
        self.fields['icon'].required = True
        self.fields['short_description'].required = True

        for field_name, field in self.fields.items():
            if isinstance(field.widget, forms.CheckboxInput):
                field.widget.attrs.update({'class': 'form-check-input'})
            elif not isinstance(field.widget, forms.SelectMultiple):
                field.widget.attrs.update({'class': 'form-control'})
            if self.errors.get(field_name):
                field.widget.attrs.update({'class': 'form-control is-invalid'})

        self.fields['parent'].queryset = Category.objects.filter(deleted_at__isnull=True)
